print(quantile((-1)^(d+1)*obj_zal3, probs = c(0.5, 0.25, 0.75)))
print(quantile(time_dar, probs = c(0.5, 0.25, 0.75)))
print(quantile(obj_dar, probs = c(0.5, 0.25, 0.75)))
obj_dar
for (d in 1:2){
dir = D[d]
load(file = paste("Out/eigen-objects_", dir, "_sd1e2.Rdata", sep = ""))
print(paste("Case = ", dir))
print("MM")
print(paste("Number of failures: ", sum(is.na(time_mm))))
print(quantile(time_mm, probs = c(.5, .25, .75)))
print(quantile(eval_mm, probs = c(.5, .25, .75)))
print(quantile((-1)^(d+1)*obj_mm, probs = c(.5, .25, .75)))
print("BQN-1")
print(paste("Number of failures: ", sum(is.na(time_bqn1))))
print(quantile(time_bqn1[!is.na(time_bqn1)], probs = c(.5, .25, .75)))
print(quantile(eval_bqn1[!is.na(eval_bqn1)], probs = c(.5, .25, .75)))
print(quantile((-1)^(d+1)*obj_bqn1[!is.na(obj_bqn1)], probs = c(.5, .25, .75)))
print("BQN-2")
print(paste("Number of failures: ", sum(is.na(time_bqn2))))
print(quantile(time_bqn2[!is.na(time_bqn2)], probs = c(.5, .25, .75)))
print(quantile(eval_bqn2[!is.na(eval_bqn2)], probs = c(.5, .25, .75)))
print(quantile((-1)^(d+1)*obj_bqn2[!is.na(obj_bqn2)], probs = c(.5, .25, .75)))
print("BQN-3")
print(paste("Number of failures: ", sum(is.na(time_bqn3))))
print(quantile(time_bqn3[!is.na(time_bqn3)], probs = c(.5, .25, .75)))
print(quantile(eval_bqn3[!is.na(eval_bqn3)], probs = c(.5, .25, .75)))
print(quantile((-1)^(d+1)*obj_bqn3[!is.na(obj_bqn3)], probs = c(.5, .25, .75)))
print("LBQN")
print(paste("Number of failures: ", sum(is.na(time_lbqn))))
print(quantile(time_lbqn[!is.na(time_lbqn)], probs = c(.5, .25, .75)))
print(quantile(eval_lbqn[!is.na(eval_lbqn)], probs = c(.5, .25, .75)))
print(quantile((-1)^(d+1)*obj_lbqn[!is.na(obj_lbqn)], probs = c(.5, .25, .75)))
print("SQUAREM-1")
print(paste("Number of failures: ", sum(is.na(time_sq1))))
print(quantile(time_sq1[!is.na(time_sq1)], probs = c(.5, .25, .75)))
print(quantile(eval_sq1[!is.na(time_sq1)], probs = c(.5, .25, .75)))
print(quantile((-1)^(d+1)*obj_sq1[!is.na(time_sq1)], probs = c(.5, .25, .75)))
print("SQUAREM-2")
print(paste("Number of failures: ", sum(is.na(time_sq2))))
print(quantile(time_sq2[!is.na(time_sq2)], probs = c(.5, .25, .75)))
print(quantile(eval_sq2[!is.na(time_sq2)], probs = c(.5, .25, .75)))
print(quantile((-1)^(d+1)*obj_sq2[!is.na(time_sq2)], probs = c(.5, .25, .75)))
print("SQUAREM-3")
print(paste("Number of failures: ", sum(is.na(time_sq3))))
print(quantile(time_sq3[!is.na(time_sq3)], probs = c(.5, .25, .75)))
print(quantile(eval_sq3[!is.na(time_sq3)], probs = c(.5, .25, .75)))
print(quantile((-1)^(d+1)*obj_sq3[!is.na(time_sq3)], probs = c(.5, .25, .75)))
print("ZAL")
print(paste("Number of failures: ", sum(is.na(time_zal))))
print(quantile(time_zal[!is.na(time_zal)], probs = c(0.5, 0.25, 0.75)))
print(quantile(eval_zal[!is.na(time_zal)], probs = c(0.5, 0.25, 0.75)))
print(quantile((-1)^(d+1)*obj_zal[!is.na(time_zal)], probs = c(0.5, 0.25, 0.75)))
print("ZAL-2")
print(sum(is.na(time_zal2)))
print(paste("Number of failures: ", sum(is.na(time_zal2))))
print(quantile(time_zal2[!is.na(time_zal2)], probs = c(0.5, 0.25, 0.75)))
print(quantile(eval_zal2[!is.na(time_zal2)], probs = c(0.5, 0.25, 0.75)))
print(quantile((-1)^(d+1)*obj_zal2[!is.na(time_zal2)], probs = c(0.5, 0.25, 0.75)))
print("ZAL-3")
print(paste("Number of failures: ", sum(is.na(time_zal3))))
print(quantile(time_zal3, probs = c(0.5, 0.25, 0.75)))
print(quantile(eval_zal3, probs = c(0.5, 0.25, 0.75)))
print(quantile((-1)^(d+1)*obj_zal3, probs = c(0.5, 0.25, 0.75)))
print("DAAREM")
print(paste("Number of failures: ", sum(is.na(time_dar))))
print(quantile(time_dar, probs = c(0.5, 0.25, 0.75)))
print(quantile(eval_dar, probs = c(0.5, 0.25, 0.75)))
print(quantile(obj_dar, probs = c(0.5, 0.25, 0.75)))
}
print(round(quantile(time_mm, probs = c(.5, .25, .75)),3)
print(quantile(eval_mm, probs = c(.5, .25, .75)))
print(round(quantile(time_mm, probs = c(.5, .25, .75)),3))
for (d in 1:2){
dir = D[d]
load(file = paste("Out/eigen-objects_", dir, "_sd1e2.Rdata", sep = ""))
print(paste("Case = ", dir))
print("MM")
print(paste("Number of failures: ", sum(is.na(time_mm))))
print(round(quantile(time_mm, probs = c(.5, .25, .75)),3))
print(round(quantile(eval_mm, probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_mm, probs = c(.5, .25, .75)),3))
print("BQN-1")
print(paste("Number of failures: ", sum(is.na(time_bqn1))))
print(round(quantile(time_bqn1[!is.na(time_bqn1)], probs = c(.5, .25, .75)),3))
print(round(quantile(eval_bqn1[!is.na(eval_bqn1)], probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_bqn1[!is.na(obj_bqn1)], probs = c(.5, .25, .75)),3))
print("BQN-2")
print(paste("Number of failures: ", sum(is.na(time_bqn2))))
print(round(quantile(time_bqn2[!is.na(time_bqn2)], probs = c(.5, .25, .75)),3))
print(round(quantile(eval_bqn2[!is.na(eval_bqn2)], probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_bqn2[!is.na(obj_bqn2)], probs = c(.5, .25, .75)),3))
print("BQN-3")
print(paste("Number of failures: ", sum(is.na(time_bqn3))))
print(round(quantile(time_bqn3[!is.na(time_bqn3)], probs = c(.5, .25, .75)),3))
print(round(quantile(eval_bqn3[!is.na(eval_bqn3)], probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_bqn3[!is.na(obj_bqn3)], probs = c(.5, .25, .75)),3))
print("LBQN")
print(paste("Number of failures: ", sum(is.na(time_lbqn))))
print(round(quantile(time_lbqn[!is.na(time_lbqn)], probs = c(.5, .25, .75)),3))
print(round(quantile(eval_lbqn[!is.na(eval_lbqn)], probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_lbqn[!is.na(obj_lbqn)], probs = c(.5, .25, .75)),3))
print("SQUAREM-1")
print(paste("Number of failures: ", sum(is.na(time_sq1))))
print(round(quantile(time_sq1[!is.na(time_sq1)], probs = c(.5, .25, .75)),3))
print(round(quantile(eval_sq1[!is.na(time_sq1)], probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_sq1[!is.na(time_sq1)], probs = c(.5, .25, .75)),3))
print("SQUAREM-2")
print(paste("Number of failures: ", sum(is.na(time_sq2))))
print(round(quantile(time_sq2[!is.na(time_sq2)], probs = c(.5, .25, .75)),3))
print(round(quantile(eval_sq2[!is.na(time_sq2)], probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_sq2[!is.na(time_sq2)], probs = c(.5, .25, .75)),3))
print("SQUAREM-3")
print(paste("Number of failures: ", sum(is.na(time_sq3))))
print(round(quantile(time_sq3[!is.na(time_sq3)], probs = c(.5, .25, .75)),3))
print(round(quantile(eval_sq3[!is.na(time_sq3)], probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_sq3[!is.na(time_sq3)], probs = c(.5, .25, .75)),3))
print("ZAL")
print(paste("Number of failures: ", sum(is.na(time_zal))))
print(round(quantile(time_zal[!is.na(time_zal)], probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile(eval_zal[!is.na(time_zal)], probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile((-1)^(d+1)*obj_zal[!is.na(time_zal)], probs = c(0.5, 0.25, 0.75)),3))
print("ZAL-2")
print(sum(is.na(time_zal2)))
print(paste("Number of failures: ", sum(is.na(time_zal2))))
print(round(quantile(time_zal2[!is.na(time_zal2)], probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile(eval_zal2[!is.na(time_zal2)], probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile((-1)^(d+1)*obj_zal2[!is.na(time_zal2)], probs = c(0.5, 0.25, 0.75)),3))
print("ZAL-3")
print(paste("Number of failures: ", sum(is.na(time_zal3))))
print(round(quantile(time_zal3, probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile(eval_zal3, probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile((-1)^(d+1)*obj_zal3, probs = c(0.5, 0.25, 0.75)),3))
print("DAAREM")
print(paste("Number of failures: ", sum(is.na(time_dar))))
print(round(quantile(time_dar, probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile(eval_dar, probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile(obj_dar, probs = c(0.5, 0.25, 0.75)),3))
}
print("Running LBQN")
time_lbqn <- rep(NA, N)
obj_lbqn <- rep(NA, N)
eval_lbqn <- rep(NA, N)
for (i in 1:N){
print(i)
start <- start_rep[i,]
start.time <- Sys.time()
fp <- LBQN(par = start, fixptfn = update, objfn = rayleigh, A=A, B=B, dir=dir,
control = list(m=10, tol = tol, maxiter = 5e4, objfn.inc=0.01))
end.time <- Sys.time()
if(fp$convergence){
time_lbqn[i] <- end.time - start.time
obj_lbqn[i] <- fp$value.objfn
eval_lbqn[i] <- fp$fpevals
}
}
time_lbqn
for (d in 1:2){
dir = D[d]
load(file = paste("Out/eigen-objects_", dir, "_sd1e2.Rdata", sep = ""))
print(paste("Case = ", dir))
print("MM")
print(paste("Number of failures: ", sum(is.na(time_mm))))
print(round(quantile(time_mm, probs = c(.5, .25, .75)),3))
print(round(quantile(eval_mm, probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_mm, probs = c(.5, .25, .75)),3))
print("BQN-1")
print(paste("Number of failures: ", sum(is.na(time_bqn1))))
print(round(quantile(time_bqn1[!is.na(time_bqn1)], probs = c(.5, .25, .75)),3))
print(round(quantile(eval_bqn1[!is.na(eval_bqn1)], probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_bqn1[!is.na(obj_bqn1)], probs = c(.5, .25, .75)),3))
print("BQN-2")
print(paste("Number of failures: ", sum(is.na(time_bqn2))))
print(round(quantile(time_bqn2[!is.na(time_bqn2)], probs = c(.5, .25, .75)),3))
print(round(quantile(eval_bqn2[!is.na(eval_bqn2)], probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_bqn2[!is.na(obj_bqn2)], probs = c(.5, .25, .75)),3))
print("BQN-3")
print(paste("Number of failures: ", sum(is.na(time_bqn3))))
print(round(quantile(time_bqn3[!is.na(time_bqn3)], probs = c(.5, .25, .75)),3))
print(round(quantile(eval_bqn3[!is.na(eval_bqn3)], probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_bqn3[!is.na(obj_bqn3)], probs = c(.5, .25, .75)),3))
print("LBQN")
print(paste("Number of failures: ", sum(is.na(time_lbqn))))
print(round(quantile(time_lbqn[!is.na(time_lbqn)], probs = c(.5, .25, .75)),3))
print(round(quantile(eval_lbqn[!is.na(eval_lbqn)], probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_lbqn[!is.na(obj_lbqn)], probs = c(.5, .25, .75)),3))
print("SQUAREM-1")
print(paste("Number of failures: ", sum(is.na(time_sq1))))
print(round(quantile(time_sq1[!is.na(time_sq1)], probs = c(.5, .25, .75)),3))
print(round(quantile(eval_sq1[!is.na(time_sq1)], probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_sq1[!is.na(time_sq1)], probs = c(.5, .25, .75)),3))
print("SQUAREM-2")
print(paste("Number of failures: ", sum(is.na(time_sq2))))
print(round(quantile(time_sq2[!is.na(time_sq2)], probs = c(.5, .25, .75)),3))
print(round(quantile(eval_sq2[!is.na(time_sq2)], probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_sq2[!is.na(time_sq2)], probs = c(.5, .25, .75)),3))
print("SQUAREM-3")
print(paste("Number of failures: ", sum(is.na(time_sq3))))
print(round(quantile(time_sq3[!is.na(time_sq3)], probs = c(.5, .25, .75)),3))
print(round(quantile(eval_sq3[!is.na(time_sq3)], probs = c(.5, .25, .75)),3))
print(round(quantile((-1)^(d+1)*obj_sq3[!is.na(time_sq3)], probs = c(.5, .25, .75)),3))
print("ZAL")
print(paste("Number of failures: ", sum(is.na(time_zal))))
print(round(quantile(time_zal[!is.na(time_zal)], probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile(eval_zal[!is.na(time_zal)], probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile((-1)^(d+1)*obj_zal[!is.na(time_zal)], probs = c(0.5, 0.25, 0.75)),3))
print("ZAL-2")
print(sum(is.na(time_zal2)))
print(paste("Number of failures: ", sum(is.na(time_zal2))))
print(round(quantile(time_zal2[!is.na(time_zal2)], probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile(eval_zal2[!is.na(time_zal2)], probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile((-1)^(d+1)*obj_zal2[!is.na(time_zal2)], probs = c(0.5, 0.25, 0.75)),3))
print("ZAL-3")
print(paste("Number of failures: ", sum(is.na(time_zal3))))
print(round(quantile(time_zal3, probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile(eval_zal3, probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile((-1)^(d+1)*obj_zal3, probs = c(0.5, 0.25, 0.75)),3))
print("DAAREM")
print(paste("Number of failures: ", sum(is.na(time_dar))))
print(round(quantile(time_dar, probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile(eval_dar, probs = c(0.5, 0.25, 0.75)),3))
print(round(quantile(obj_dar, probs = c(0.5, 0.25, 0.75)),3))
}
##################################################
########## Quadratic Minimization ################
##################################################
set.seed(1)
rm(list = ls())
library(pracma)
library(quasiNewtonMM)
library(turboEM)
library(daarem)
library(RColorBrewer)
objective <- function(x, A, a, L)
{
obj <- 0.5*crossprod(x, (A %*% x)) + crossprod(a, x)
return (obj)
}
neg.objective <- function(x, A, a, L){
obj <- 0.5*crossprod(x, (A %*% x)) + crossprod(a, x)
return (-obj)
}
update <- function(now, A, a, L)
{
new <- now - ((A %*% now) + a)/L
return (new)
}
#######################################
dim <- 1000
u <- matrix(rnorm(dim*dim, mean = 0, sd = 10), dim, dim)
A <- t(u) %*% u
L <- 1.001*norm(max(abs(eigen(A)$values)), type = "2")
a <- as.matrix(rnorm(dim, mean = 0, sd = 10))
truth <- - solve(A) %*% a
true.obj <- objective(truth, A, a, L)
N <- 1
start.all <- matrix(rnorm(dim*N, mean = 0, sd = 1000), nrow = N, ncol = dim)
tol = 1e-5
time_lbqn <- rep(0, N)
obj_lbqn <- rep(0, N)
eval_lbqn <- rep(0, N)
for (i in 1:N)
{
print(i)
start <- truth + as.matrix(start.all[i,])
start.time <- Sys.time()
fp <- LBQN(par = start, A=A, a=a, L=L, fixptfn = update, objfn = objective,
control = list(tol = tol, maxiter = 1e5, m = 2, verbose=TRUE))
end.time <- Sys.time()
time_lbqn[i] <- end.time - start.time
obj_lbqn[i] <- fp$value.objfn
eval_lbqn[i] <- fp$fpevals
}
true.obj
time_lbqn <- rep(0, N)
obj_lbqn <- rep(0, N)
eval_lbqn <- rep(0, N)
for (i in 1:N)
{
print(i)
start <- truth + as.matrix(start.all[i,])
start.time <- Sys.time()
fp <- LBQN(par = start, A=A, a=a, L=L, fixptfn = update, objfn = objective,
control = list(tol = tol, maxiter = 1e5, m = 2, verbose=TRUE))
end.time <- Sys.time()
time_lbqn[i] <- end.time - start.time
obj_lbqn[i] <- fp$value.objfn
eval_lbqn[i] <- fp$fpevals
}
print(round(quantile(time_lbqn, c(.5, .25, .75)), 3))
print(quantile(eval_lbqn, c(.5, .25, .75)))
print(round(quantile(obj_lbqn, c(.5, .25, .75)), 5))
##########################################
#### SQUAREM - 1
##########################################
eval_sq1 <- rep(0, N)
time_sq1 <- rep(0, N)
obj_sq1 <- rep(0, N)
for (i in 1:N){
print(i)
start <- truth + as.matrix(start.all[i,])
start.time <- Sys.time()
fp <- fp <- turboem(par = start, fixptfn = update, objfn = objective, A=A, a=a, L=L, method = "squarem", control.method = list(K=1, version=1), control.run = list(tol=tol, maxiter=1e5))
end.time <- Sys.time()
time_sq1[i] <- end.time - start.time
obj_sq1[i] <- fp$value.objfn
eval_sq1[i] <- fp$fpeval
}
print(round(quantile(time_sq1, c(.5, .25, .75)), 3))
print(quantile(eval_sq1, c(.5, .25, .75)))
print(round(quantile(obj_sq1, c(.5, .25, .75)), 4))
##########################################
#### SQUAREM - 2
##########################################
eval_sq2 <- rep(0, N)
time_sq2 <- rep(0, N)
obj_sq2 <- rep(0, N)
for (i in 1:N){
print(i)
start <- truth + as.matrix(start.all[i,])
start.time <- Sys.time()
fp <- fp <- turboem(par = start, fixptfn = update, objfn = objective, A=A, a=a, L=L, method = "squarem", control.method = list(K=1, version=2), control.run = list(tol=tol, maxiter=1e5))
end.time <- Sys.time()
time_sq2[i] <- end.time - start.time
obj_sq2[i] <- fp$value.objfn
eval_sq2[i] <- fp$fpeval
}
set.seed(1)
rm(list = ls())
library(pracma)
library(quasiNewtonMM)
library(turboEM)
library(daarem)
library(RColorBrewer)
objective <- function(x, A, a, L)
{
obj <- 0.5*crossprod(x, (A %*% x)) + crossprod(a, x)
return (obj)
}
neg.objective <- function(x, A, a, L){
obj <- 0.5*crossprod(x, (A %*% x)) + crossprod(a, x)
return (-obj)
}
update <- function(now, A, a, L)
{
new <- now - ((A %*% now) + a)/L
return (new)
}
#######################################
dim <- 1000
u <- matrix(rnorm(dim*dim, mean = 0, sd = 10), dim, dim)
A <- t(u) %*% u
L <- 1.001*norm(max(abs(eigen(A)$values)), type = "2")
a <- as.matrix(rnorm(dim, mean = 0, sd = 10))
truth <- - solve(A) %*% a
true.obj <- objective(truth, A, a, L)
N <- 10
start.all <- matrix(rnorm(dim*N, mean = 0, sd = 1000), nrow = N, ncol = dim)
tol = 1e-5
#####################################################
#### L-BQN
#####################################################
time_lbqn <- rep(0, N)
obj_lbqn <- rep(0, N)
eval_lbqn <- rep(0, N)
for (i in 1:N)
{
print(i)
start <- truth + as.matrix(start.all[i,])
start.time <- Sys.time()
fp <- LBQN(par = start, A=A, a=a, L=L, fixptfn = update, objfn = objective,
control = list(tol = tol, maxiter = 1e5, m = 2, verbose=TRUE))
end.time <- Sys.time()
time_lbqn[i] <- end.time - start.time
obj_lbqn[i] <- fp$value.objfn
eval_lbqn[i] <- fp$fpevals
}
print(round(quantile(time_lbqn, c(.5, .25, .75)), 3))
print(quantile(eval_lbqn, c(.5, .25, .75)))
print(round(quantile(obj_lbqn, c(.5, .25, .75)), 5))
##########################################
#### SQUAREM - 1
##########################################
eval_sq1 <- rep(0, N)
time_sq1 <- rep(0, N)
obj_sq1 <- rep(0, N)
for (i in 1:N){
print(i)
start <- truth + as.matrix(start.all[i,])
start.time <- Sys.time()
fp <- fp <- turboem(par = start, fixptfn = update, objfn = objective, A=A, a=a, L=L, method = "squarem", control.method = list(K=1, version=1), control.run = list(tol=tol, maxiter=1e5))
end.time <- Sys.time()
time_sq1[i] <- end.time - start.time
obj_sq1[i] <- fp$value.objfn
eval_sq1[i] <- fp$fpeval
}
print(round(quantile(time_sq1, c(.5, .25, .75)), 3))
print(quantile(eval_sq1, c(.5, .25, .75)))
print(round(quantile(obj_sq1, c(.5, .25, .75)), 4))
##########################################
#### SQUAREM - 2
##########################################
eval_sq2 <- rep(0, N)
time_sq2 <- rep(0, N)
obj_sq2 <- rep(0, N)
for (i in 1:N){
print(i)
start <- truth + as.matrix(start.all[i,])
start.time <- Sys.time()
fp <- fp <- turboem(par = start, fixptfn = update, objfn = objective, A=A, a=a, L=L, method = "squarem", control.method = list(K=1, version=2), control.run = list(tol=tol, maxiter=1e5))
end.time <- Sys.time()
time_sq2[i] <- end.time - start.time
obj_sq2[i] <- fp$value.objfn
eval_sq2[i] <- fp$fpeval
}
print(round(quantile(time_sq2, c(.5, .25, .75)), 3))
print(quantile(eval_sq2, c(.5, .25, .75)))
print(round(quantile(obj_sq2, c(.5, .25, .75)), 4))
##########################################
#### SQUAREM - 3
##########################################
eval_sq3 <- rep(0, N)
time_sq3 <- rep(0, N)
obj_sq3 <- rep(0, N)
for (i in 1:N){
print(i)
start <- truth + as.matrix(start.all[i,])
start.time <- Sys.time()
fp <- fp <- turboem(par = start, fixptfn = update, objfn = objective, A=A, a=a, L=L, method = "squarem", control.method = list(K=1, version=3), control.run = list(tol=tol, maxiter=1e5))
end.time <- Sys.time()
time_sq3[i] <- end.time - start.time
obj_sq3[i] <- fp$value.objfn
eval_sq3[i] <- fp$fpeval
}
print(round(quantile(time_sq3, c(.5, .25, .75)), 3))
print(quantile(eval_sq3, c(.5, .25, .75)))
print(round(quantile(obj_sq3, c(.5, .25, .75)), 4))
#################################################
##### ZAL; q=2
#################################################
time_zal <- rep(NA, N)
obj_zal <- rep(NA, N)
eval_zal <- rep(NA, N)
for (i in 1:N){
print(i)
start <- truth + as.matrix(start.all[i,])
start.time <- Sys.time()
fp <- turboem(par = start, fixptfn = update, objfn = objective, A=A, a=a, L=L, method = "qn", control.method = list(qn=2), control.run = list(tol = tol, maxiter = 1e5))
end.time <- Sys.time()
print(fp$convergence)
time_zal[i] <- end.time - start.time
obj_zal[i] <- fp$value.objfn
eval_zal[i] <- fp$fpeval
}
print(round(quantile(time_zal, c(.5, .25, .75)), 3))
print(quantile(eval_zal, c(.5, .25, .75)))
print(round(quantile(obj_zal, c(.5, .25, .75)), 4))
#################################################
##### ZAL; q=min(p,10)
#################################################
time_zal2 <- rep(NA, N)
obj_zal2 <- rep(NA, N)
eval_zal2 <- rep(NA, N)
for (i in 1:N){
start <- truth + as.matrix(start.all[i,])
start.time <- Sys.time()
fp <- turboem(par = start, fixptfn = update, objfn = objective, A=A, a=a, L=L, method = "qn", control.method = list(qn=min(dim,10)), control.run = list(tol = tol, maxiter = 1e5))
end.time <- Sys.time()
print(fp$convergence)
time_zal2[i] <- end.time - start.time
obj_zal2[i] <- fp$value.objfn
eval_zal2[i] <- fp$fpeval
}
print(round(quantile(time_zal2, c(.5, .25, .75)), 3))
print(quantile(eval_zal2, c(.5, .25, .75)))
print(round(quantile(obj_zal2, c(.5, .25, .75)), 4))
#################################################
##### DAAREM
#################################################
time_dar <- rep(NA, N)
obj_dar <- rep(NA, N)
eval_dar <- rep(NA, N)
for (i in 1:N){
print(paste("Iter: ", i))
start <- truth + as.matrix(start.all[i,])
start.time <- Sys.time()
fp <- daarem(par = start, fixptfn = update, objfn = neg.objective, A=A, a=a, L=L, control = list(tol = tol, maxiter = 1e5))
end.time <- Sys.time()
time_dar[i] <- end.time - start.time
obj_dar[i] <- -fp$value.objfn
eval_dar[i] <- fp$fpeval
}
print(round(quantile(time_dar, c(.5, .25, .75)), 3))
print(quantile(eval_dar, c(.5, .25, .75)))
print(round(quantile(obj_dar, c(.5, .25, .75)), 4))
save(time_lbqn, time_sq1, time_sq2, time_sq3, time_zal, time_zal2, time_dar,
eval_lbqn, eval_sq1, eval_sq2, eval_sq3, eval_zal, eval_zal2, eval_dar,
obj_lbqn, obj_sq1, obj_sq2, obj_sq3, obj_zal, obj_zal2, obj_dar, file = paste("Out/quad-objects_sq1e3_dim", dim, ".Rdata"))
####################################
#### Boxplot
##################
time_lbqn
time_sq1
time_sq2
time_sq3
time_zal
time_zal2
time_dar
print(round(quantile(time_lbqn, c(.5, .25, .75)), 3))
print(round(quantile(time_dar, c(.5, .25, .75)), 3))
print(round(quantile(obj_dar, c(.5, .25, .75)), 3))
print(round(quantile(obj_lbqn, c(.5, .25, .75)), 3))
